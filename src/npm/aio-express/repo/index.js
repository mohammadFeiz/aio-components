"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.AIOSchema=void 0;var _express=_interopRequireDefault(require("express")),_mongoose=_interopRequireDefault(require("mongoose")),_bcryptjs=_interopRequireDefault(require("bcryptjs")),_jsonwebtoken=_interopRequireDefault(require("jsonwebtoken")),_bodyParser=_interopRequireDefault(require("body-parser")),_agenda=_interopRequireDefault(require("agenda")),_cookieParser=_interopRequireDefault(require("cookie-parser")),_cors=_interopRequireDefault(require("cors"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _defineProperty(e,t,s){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"==typeof t?t:String(t)}function _toPrimitive(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,t||"default");if("object"!=typeof r)return r;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}class AIOExpress{constructor(e){_defineProperty(this,"app",void 0),_defineProperty(this,"p",void 0),_defineProperty(this,"jwt",void 0),_defineProperty(this,"AuthRouter",void 0),_defineProperty(this,"AuthModel",void 0),_defineProperty(this,"models",void 0),_defineProperty(this,"routers",void 0),_defineProperty(this,"tokenBaseDic",{}),_defineProperty(this,"tokenLessDic",{}),_defineProperty(this,"AIOSchemaInstance",new AIOSchema),_defineProperty(this,"schemas",{}),_defineProperty(this,"env",void 0),_defineProperty(this,"gcrud",void 0),_defineProperty(this,"getRow",void 0),_defineProperty(this,"getRows",void 0),_defineProperty(this,"addRow",void 0),_defineProperty(this,"editRow",void 0),_defineProperty(this,"addOrEditRow",void 0),_defineProperty(this,"editRows",void 0),_defineProperty(this,"removeRow",void 0),_defineProperty(this,"removeRows",void 0),_defineProperty(this,"getUser",void 0),_defineProperty(this,"getUsers",void 0),_defineProperty(this,"addUser",void 0),_defineProperty(this,"editUser",void 0),_defineProperty(this,"editUsers",void 0),_defineProperty(this,"removeUser",void 0),_defineProperty(this,"removeUsers",void 0),_defineProperty(this,"changeUserPassword",void 0),_defineProperty(this,"agenda",void 0),_defineProperty(this,"getModel",e=>this.models[e]),_defineProperty(this,"log",(e,t)=>{"green"===t?console.log("\x1b[32m%s\x1b[0m",e):"yellow"===t?console.log("\x1b[33m%s\x1b[0m",e):"red"===t?console.log("\x1b[31m%s\x1b[0m",e):"orange"===t?console.log("\x1b[38;5;208m%s\x1b[0m",e):console.log(e)}),_defineProperty(this,"start",async()=>{for(let e in this.app.use((0,_cors.default)()),this.app.use(_bodyParser.default.json()),this.app.use((0,_cookieParser.default)()),this.app.use(_bodyParser.default.urlencoded({extended:!0})),this.connectToMongoose(),this.AuthRouter&&this.p.auth&&this.app.use(this.fixPath(this.p.auth.path),this.AuthRouter),this.tokenLessDic)this.app.use(this.tokenLessDic[e],this.routers[e]);for(let t in this.app.use(this.jwt),this.tokenBaseDic){let s=this.tokenBaseDic[t],r=this.routers[t];this.app.use(s,r)}await this.agenda.start(),this.app.listen(this.env.port,()=>{console.log(`Server running on port ${this.env.port}`)})}),_defineProperty(this,"transaction",async e=>{let t=await _mongoose.default.startSession();t.startTransaction();try{let s=await e(t);if("string"==typeof s)return await t.abortTransaction(),t.endSession(),console.error("Callback error:",s),s;return await t.commitTransaction(),t.endSession(),s}catch(r){return await t.abortTransaction(),t.endSession(),console.error("Transaction failed:",r.message),r.message}}),_defineProperty(this,"schedule",async e=>{try{let t=await this.agenda.jobs({name:e.jobName});if(t.length>0){let s=t[0];if(s.attrs.data.version===e.version){console.log(`job with name ${e.jobName} and version ${e.version} is already exist.`);return}await this.agenda.cancel({name:e.jobName}),console.log(`job with name ${e.jobName} and last version removed.`)}this.agenda.define(e.jobName,async t=>await e.callback());let r=new Date(e.callAt);await this.agenda.schedule(r,e.jobName,{version:e.version}),console.log(`job ${e.jobName} for time ${r} and version ${e.version} scheduled.`)}catch(i){console.error(`خطا در زمان‌بندی شغل: ${i.message}`)}}),_defineProperty(this,"stopSchedule",async e=>{try{let t=await this.agenda.cancel({name:e});t?console.log(`شغل با نام ${e} با موفقیت حذف شد.`):console.log(`شغلی با نام ${e} پیدا نشد.`)}catch(s){console.error(`خطا در حذف شغل: ${s.message}`)}}),_defineProperty(this,"connectToMongoose",()=>{let e=this.env.mongoUrl;_mongoose.default.connect(e).then(()=>console.log("MongoDB connected")).catch(e=>console.log(e))}),_defineProperty(this,"getTotal",async e=>await this.getModel(e).countDocuments({})),_defineProperty(this,"getNewPassword",async e=>{if(!1!==e.oldPassword){let t=await _bcryptjs.default.compare(e.oldPassword,e.userPassword);if(!t)return!1}let s=await _bcryptjs.default.hash(e.newPassword,10);return s}),_defineProperty(this,"initJwt",(e,t,s)=>{if(!this.p.auth)return;let r=e.headers.authorization&&e.headers.authorization.split(" ")[1];if(!r)return t.status(401).json({message:"Access denied. No token provided.",success:!1});_jsonwebtoken.default.verify(r,this.env.secretKey,(r,i)=>{if(r)return t.status(401).json({message:"Invalid token or token is expired."});e.user=i,s()})}),_defineProperty(this,"getExpiresIn",()=>{if(!this.p.auth)return"";let{tokenTime:e}=this.p.auth,{unit:t,value:s}=e;return`${s}${t}`}),_defineProperty(this,"getSchemaByRefrence",e=>"string"==typeof e?{dif:this.schemas[e],ref:e}:{dif:e,ref:""}),_defineProperty(this,"handleAuth",()=>{if(!this.p.auth)return;let{registerExeption:e,loginExeption:t}=this.p.auth,{dif:s}=this.getSchemaByRefrence(this.p.auth.schema||{}),r=s,i={...r,password:{type:"string",required:!0},userName:{type:"string",required:!0,unique:!0}},n=this.AIOSchemaInstance.getSchema(i);n.methods.matchPassword=async function(e){return await _bcryptjs.default.compare(e,this.password)},this.AuthModel=_mongoose.default.model(this.p.auth.name,n);let a=async(t,s)=>{if(!this.AuthModel)return s.status(400).json({message:"class error 23423"});let{userName:i,password:n,userProps:a={}}=t.body;try{let o=await this.AuthModel.findOne({userName:i});if(o)return s.status(403).json({message:"User with this username already exists"});if(!n||!i)return s.status(403).json({message:"Missing username or password"});let u={};if(r){u=this.AIOSchemaInstance.getDefaultValueBySchema(r,{...a,userName:i,password:n});let h=this.AIOSchemaInstance.validateObjectBySchema(r,"",u);if("string"==typeof h)return s.status(400).json({message:h,success:!1})}if(e){let d=await e({userName:i,password:n,userProps:a});if(d){if(d.status)return s.status(d.status).json({message:d.message,success:!1});d.userName}}let c=await _bcryptjs.default.hash(n,10),l={...u,password:c,userName:i},f=new this.AuthModel(l);return await f.save(),s.status(201).json({message:"User registered successfully",user:l})}catch(y){return s.status(500).json({message:"Error registering user",error:y.message})}};this.AuthRouter.post("/register",a);let o=async(e,s)=>{if(!this.AuthModel)return;let{userName:r,password:i}=e.body;try{let n=await this.AuthModel.findOne({userName:r});if(!n||!await n.matchPassword(i))return s.status(400).json({message:"Invalid username or password"});let a=this.env.secretKey,o=_jsonwebtoken.default.sign({id:n._id},a,{expiresIn:this.getExpiresIn()});if(t){let u=await t({user:n,token:o});if(u){if(u.status)return s.status(u.status).json({message:u.message,success:!1});if(u.user){let h=n.toObject();for(let d in u.user)h[d]=u.user[d];return s.status(200).json({message:"Login successful",token:o,user:h})}}}return s.status(200).json({message:"Login successful",token:o,user:n})}catch(c){return s.status(500).json({message:"Error logging in",error:c.message})}};this.AuthRouter.post("/login",o),this.AuthRouter.get("/checkToken",async(e,t)=>{if(this.p.auth)try{var s;let r=(null===(s=e.headers.authorization)||void 0===s?void 0:s.split(" ")[1])||"";_jsonwebtoken.default.verify(r,this.env.secretKey,async(e,s)=>{if(e)return this.setResult({res:t,message:"Token is invalid",success:!1,status:401});if(this.AuthModel){let r=s.id,i=await this.getUser({id:r});if(null===i)return this.setResult({res:t,message:"User Not Found",success:!1,status:401});if("string"==typeof i)return this.setResult({res:t,message:i,success:!1,status:401})}return this.setResult({res:t,message:"authorized",success:!0,status:201})})}catch(i){return this.setResult({res:t,status:500,success:!1,message:i.message})}})}),_defineProperty(this,"addSchema",(e,t)=>{this.schemas[e]=t,this.AIOSchemaInstance.schemas=this.schemas}),_defineProperty(this,"getSchemaDefinition",(e,t)=>{if("string"==typeof e){let s=this.schemas[e];return s.type&&console.error(`Error in entity ${t} . schema is not valid . route schemas cannot get type property`),s}return e}),_defineProperty(this,"addEntities",e=>{if(this.p.uiDoc){let{success:t,result:s}=this.AIOSchemaInstance.generateUIDoc(e,this.p.appName),r=t?"generate ui doc was successful!!!":"error in generate ui doc!!!",i=t?"green":"red";this.log(r,i),this.log(s,"yellow")}for(let n in this.log(this.AIOSchemaInstance.getApiTypes(e),"orange"),e)this.addEntity(e[n],n)}),_defineProperty(this,"fixPath",(e,t)=>("/"!==e[0]?`/${e}`:e)+(t||"")),_defineProperty(this,"addEntity",(e,t)=>{let{schema:s,apis:r,requiredToken:i=!0}=e,n=i?"tokenBaseDic":"tokenLessDic";if(this[n][t]=this.fixPath(e.path||`/${t}`),s)try{let a=this.getSchemaDefinition(s,t),o={};for(let u in a)"id"!==u&&(o[u]=a[u]);let h=this.AIOSchemaInstance.getSchema(o),d=_mongoose.default.model(t,h);this.models[t]=d}catch(c){console.error(`Error creating model for entity ${t}:`,c.message);return}try{for(let l of(this.routers[t]=_express.default.Router(),r)){let{path:f,method:y,fn:p,queryString:g}=l,m=this.fixPath(f,g);this.routers[t][y](m,async(e,t)=>{try{let s=await this.getUserByReq(e);if(null===s)return this.setResult({res:t,success:!1,message:"req user not found",status:401});let r={...e.body||{}};if("post"===y&&!l.body)return this.setResult({status:403,success:!1,message:"missing api.body in backend app",res:t});let i=this.processUrl(e);if(l.body){let n=this.schemas[l.body];n||console.log(`${l.body} in not defined by addSchema`);let a=this.AIOSchemaInstance.validateObjectBySchema(n,"",e.body);if("string"==typeof a)return a=`in request body : ${a}`,this.setResult({status:400,success:!1,message:a,res:t})}if("string"==typeof s)return{success:!1,message:s,status:403};let o;if(l.checkAccess){let u=await l.checkAccess({reqUser:s,body:r,queryParam:i});if("string"==typeof u)return t.status(403).json({message:u,success:!1});u&&(o=u)}let h=await p({req:e,res:t,reqUser:s,body:r,accessBody:o,queryParam:i});return this.setResult({...h,res:t,message:h.message||""})}catch(d){return t.status(500).json({message:d.message,success:!1})}})}}catch(w){console.error(`Error creating router for entity ${t}:`,w.message)}}),_defineProperty(this,"processUrl",e=>Object.keys(e.params).length>0?e.params:Object.keys(e.query).length>0?e.query:{}),_defineProperty(this,"setResult",e=>e.res.status(e.status).json({message:e.message,success:e.success,value:e.value})),_defineProperty(this,"getUserByReq",async e=>{try{if(!this.AuthModel)return null;let t=e.user.id,s=await this.AuthModel.findById(t);return s}catch(r){return r.message}}),this.p=e,this.env={mongoUrl:e.env.mongoUrl,secretKey:e.env.secretKey,port:e.env.port},this.models={},this.routers={},this.app=(0,_express.default)(),this.AuthRouter=_express.default.Router(),this.jwt=this.initJwt,e.auth&&this.handleAuth(),this.gcrud=new GCRUD({getModel:this.getModel,getAuthModel:()=>this.AuthModel}),this.getRow=this.gcrud.getRow,this.getRows=this.gcrud.getRows,this.addRow=this.gcrud.addRow,this.editRow=this.gcrud.editRow,this.addOrEditRow=this.gcrud.addOrEditRow,this.editRows=this.gcrud.editRows,this.removeRow=this.gcrud.removeRow,this.removeRows=this.gcrud.removeRows,this.getUser=async e=>await this.getRow({...e,entityName:"auth"}),this.getUsers=async e=>await this.getRows({...e,entityName:"auth"}),this.addUser=async e=>{let t=e.newValue,s=await _bcryptjs.default.hash(t.password,10);t.password=s;let r=await this.addRow({...e,newValue:t,entityName:"auth"});return r},this.editUser=async e=>await this.editRow({...e,entityName:"auth"}),this.editUsers=async e=>await this.editRows({...e,newValue:e.newValue,entityName:"auth"}),this.removeUser=async e=>await this.removeRow({...e,entityName:"auth"}),this.removeUsers=async e=>await this.removeRows({...e,entityName:"auth"}),this.changeUserPassword=async e=>{try{let t=await this.getUser({id:e.userId});if(null===t)return"user not found";if("string"==typeof t)return t;let s=await this.getNewPassword({userPassword:t.id,oldPassword:e.oldPassword,newPassword:e.newPassword});if(!1===s)return"old password is not match";let r={password:s},i=await this.editUser({id:e.userId,newValue:r});if("string"==typeof i)return i;return!0}catch(n){return n.message}};let t=new _agenda.default({db:{address:this.env.mongoUrl}});this.agenda=t}}var _default=exports.default=AIOExpress;class GCRUD{constructor(e){_defineProperty(this,"getModel",void 0),_defineProperty(this,"getAuthModel",void 0),_defineProperty(this,"getModelByP",async e=>"auth"===e.entityName?this.getAuthModel():await this.getModel(e.entityName)),_defineProperty(this,"fixId",e=>("object"!=typeof e||Array.isArray(e)||null===e||(e.id=e._id),e)),_defineProperty(this,"getRow",async e=>{try{let t=await this.getModelByP(e);if(e.id){let s=await t.findById(e.id);return this.fixId(s)}if(!e.search)return"Error in get row: please send search object or id for search";{let r=await t.findOne(e.search);return this.fixId(r)}}catch(i){return`Error in get row: ${i.message}`}}),_defineProperty(this,"getRows",async e=>{try{let t=await this.getModelByP(e);if(e.ids&&e.ids.length>0)return await t.find({_id:{$in:e.ids}});if(e.search){let s=await t.find(e.search);return s.map(e=>this.fixId(e))}return[]}catch(r){return`Error in getRows: ${r.message}`}}),_defineProperty(this,"addRow",async e=>{try{let t,s;try{s=new(t=await this.getModelByP(e))(e.newValue)}catch(r){return r.message}let i=e.session?{session:e.session}:void 0,n=await s.save(i).catch(e=>`Error in adding row : ${e}`),a=this.fixId(n);return a}catch(o){return`Error in adding row: ${o.message}`}}),_defineProperty(this,"editRow",async e=>{try{let t=await this.getModelByP(e),s=await this.getRow(e);if(null===s)return"Record not found";if("string"==typeof s)return s;for(let r in e.newValue)"id"!==r&&"_id"!==r&&(s[r]=e.newValue[r]);let i=await t.findByIdAndUpdate(s.id,s,{new:!0,session:e.session});if(!i)return"Record not found";return this.fixId(i)}catch(n){throw Error(`Error updating record: ${n.message}`)}}),_defineProperty(this,"addOrEditRow",async e=>{try{let t=await this.getModelByP(e),s=await this.getRow({entityName:e.entityName,search:e.search,id:e.id});if("string"==typeof s)return s;if(null!==s){let r=await t.findByIdAndUpdate(s.id,e.newValue,{new:!0,session:e.session});return this.fixId(r)}{let i=new t(e.newValue);return await i.save(),this.fixId(i)}}catch(n){return`Error adding or updating record: ${n.message}`}}),_defineProperty(this,"editRows",async e=>{try{let t=await this.getModelByP(e),s;s=e.ids&&e.ids.length>0?{_id:{$in:e.ids}}:e.search;let r=await t.updateMany(s,{$set:e.newValue},{session:e.session});if(0===r.modifiedCount)return"No records found to update";return r.modifiedCount}catch(i){throw Error(`Error updating records: ${i.message}`)}}),_defineProperty(this,"removeRow",async e=>{try{let t=await this.getModelByP(e),s;if(e.id)s={_id:e.id};else{if(!e.search)return"No criteria provided for deletion";s=e.search}let r=await await t.findOneAndDelete(s,{session:e.session});if(!r)return null;return this.fixId(r)}catch(i){throw Error(`Error deleting record: ${i.message}`)}}),_defineProperty(this,"removeRows",async e=>{try{let t=await this.getModelByP(e),s;s=e.ids&&e.ids.length>0?{_id:{$in:e.ids}}:e.search;let r=await t.deleteMany(s,{session:e.session});if(0===r.deletedCount)return"No records found to delete";return r.deletedCount}catch(i){throw Error(`Error deleting records: ${i.message}`)}}),this.getModel=e.getModel,this.getAuthModel=e.getAuthModel}}class AIOSchema{constructor(){_defineProperty(this,"schemas",{}),_defineProperty(this,"getSchemaByRefrence",e=>"string"==typeof e?{dif:this.schemas[e],ref:e}:{dif:e,ref:""}),_defineProperty(this,"isSchemaRowSchema",e=>{let{dif:t}=this.getSchemaByRefrence(e);return!t.type}),_defineProperty(this,"isSchemaRowMap",e=>{let{dif:t}=this.getSchemaByRefrence(e);return!!t.of}),_defineProperty(this,"getSchemaType",e=>{if("string"===e)return String;if("number"===e)return Number;if("boolean"===e)return Boolean;if("null"!==e)if("true"===e)return Boolean;else if("false"===e)return Boolean;else if("date"===e)return Date;else if("map"===e)return Map;else if("string"==typeof e){let t=this.schemas[e];if(!t)return;return this.getSchemaType(t)}else if(Array.isArray(e))return[this.getSchemaType(e[0])];else return this.getSchema(e)}),_defineProperty(this,"getSchema",e=>{let{dif:t}=this.getSchemaByRefrence(e),s=t;try{let r={};Object.keys(s).forEach(t=>{let i=this.getSchemaByRefrence(s[t]),n=i.dif;n.type||(console.error("missing schemaDefinitionOption.type"),console.error("schemaDefinition is:",e),console.error("field is:",t));let a=this.getSchemaType(n.type);if(void 0===a){console.log(`schema.type:'${n.type}' is not valid for mongooseSchema`);return}let o={type:a,required:!!n.required,unique:!!n.unique};void 0!==n.def&&(o.default=n.def),n.ref&&(o.ref=n.ref),n.enum&&(o.enum=n.enum),n.minLength&&(o.minLength=n.minLength),n.maxLength&&(o.maxLength=n.maxLength),n.min&&(o.min=n.min),n.max&&(o.max=n.max),void 0!==n.index&&(o.index=n.index),n.validate&&(o.validate={validator:n.validate,message:n.errorMessage||"Validation failed"}),r[t]=o});let i=new _mongoose.default.Schema(r,{timestamps:!0,toJSON:{virtuals:!0},toObject:{virtuals:!0}});return i}catch(n){return console.error("generate schema error by schemaDefinition =>",n.message),console.error(`schemaDefinition is => ${s}`),console.error(`defined schema is => ${e}`),new _mongoose.default.Schema({},{timestamps:!0,toJSON:{virtuals:!0},toObject:{virtuals:!0}})}}),_defineProperty(this,"validateObjectBySchema",(e,t,s)=>"string"==typeof e?"error 56452435345":e.type?this.validateValueBySchemaDefinitionOption(e,t,s):this.validateObjectBySchemaDefinition(e,t,s)),_defineProperty(this,"validateObjectBySchemaDefinition",(e,t,s)=>{let{dif:r}=this.getSchemaByRefrence(e),i=r;if("string"==typeof i)return"error 5423456";let n=Object.keys(i);for(let a of n){let{dif:o}=this.getSchemaByRefrence(i[a]),u=o,h=s[a],d=this.validateObjectBySchema(u,`${t}.${a}`,h);if("string"==typeof d)return d}}),_defineProperty(this,"validateValueBySchemaDefinitionOption",(e,t,s)=>{let{dif:r}=this.getSchemaByRefrence(e);if(Array.isArray((e=r).type))return Array.isArray(s)?this.validateObjectBySchema({type:e.type[0]},t+"[0]",s[0]):`property "${t}" should be an array`;if(e.required&&null==s)return`property "${t}" is required but not provided`;if("map"===e.type){if("object"!=typeof s||null===s||Array.isArray(s))return`property "${t}" should be an object (Map)`;if(!e.of)return`missing of property but type is map in schemaDefinitionOption by key = ${t}`;for(let i in s)return this.validateObjectBySchema({type:e.of,required:!0},t,s[i])}return"object"==typeof e.type?e.type.type?"invalid schema. schema.type.type detected":this.validateObjectBySchema(e.type,`${t}.type`,s||{}):void 0===s||this.isValidType(s,e.type)?void 0:`property "${t}" is not of type ${e.type}, value is ${JSON.stringify(s,null,3)}`}),_defineProperty(this,"isValidType",(e,t)=>{switch(t){case"string":return"string"==typeof e;case"number":return"number"==typeof e;case"boolean":return"boolean"==typeof e;case"false":return!1===e;case"null":return null===e;case"true":return!0===e;case"date":return e instanceof Date;default:return!0}}),_defineProperty(this,"getDefaultValueBySchema",(e,t)=>"string"==typeof e?{}:e.type?this.getDefaultValueBySchemaDefinitionOption(e,t):this.getDefaultObjectBySchemaDefinition(e,t)),_defineProperty(this,"getDefaultObjectBySchemaDefinition",(e,t)=>{let{dif:s}=this.getSchemaByRefrence(e),r=s,i={...t};return Object.keys(r).forEach(e=>{let s=r[e];if("string"==typeof s)return t;i[e]=this.getDefaultValueBySchema(s,i[e])}),i}),_defineProperty(this,"getDefaultValueBySchemaDefinitionOption",(e,t)=>{let{dif:s}=this.getSchemaByRefrence(e);return(e=s,void 0!==t)?t:!0===e.required?e.def:void 0}),_defineProperty(this,"schemaDefinitionToTS",e=>{let{dif:t}=this.getSchemaByRefrence(e),s=t,r=`{
`,i=Object.keys(s);for(let n=0;n<i.length;n++){let a=i[n],o=s[a],{dif:u,ref:h}=this.getSchemaByRefrence(o);if(h)r+=`   ${a}: ${h},
`;else{let d=u,{success:c,result:l}=this.schemaDefinitionOptionToTS(d);if(!c)return{success:!1,result:l};r+=`   ${a}: ${l},
`}}return{success:!0,result:r+="}"}}),_defineProperty(this,"simpleTypeToTS",(e,t)=>{let s=e=>({success:!0,result:`${e}${t?"":" | undefined"}`});switch(e){case"string":return s("string");case"number":return s("number");case"boolean":return s("boolean");case"null":return s("null");case"true":return s("true");case"false":return s("false");case"date":return s("Date");default:return s("any")}}),_defineProperty(this,"schemaToTS",e=>{let{dif:t,ref:s}=this.getSchemaByRefrence(e),r;return!0===(r=s?{success:!0,result:s}:t.type?this.schemaDefinitionOptionToTS(e):this.schemaDefinitionToTS(e)).success&&(r.result=r.result.replace(/'null'/g,"null").replace(/"null"/g,"null")),r}),_defineProperty(this,"schemaDefinitionOptionToTS",e=>{let{dif:t}=this.getSchemaByRefrence(e),s=t;if(Array.isArray(s.type)){let{dif:r,ref:i}=this.getSchemaByRefrence(s.type[0]);if(i)return{success:!0,result:`(${i})[]`};let{success:n,result:a}=this.schemaDefinitionOptionToTS({type:r,required:!0});return n?{success:!0,result:`(${a})[]`}:{success:!1,result:a}}if("object"==typeof s.type)return s.type.type?{success:!1,result:"invalid schema. schema.type.type detected"}:this.schemaDefinitionToTS(s.type);if("map"===s.type){if(!s.of)return{success:!1,result:`in this schema definition option type is map but missing of property as schema definition. schema definition row is => ${JSON.stringify(s,null,3)}`};let{dif:o,ref:u}=this.getSchemaByRefrence(s.of);if(u)return{success:!0,result:`{[key: string]: ${u}${s.required?"":" | undefined"}}`};let{success:h,result:d}=this.schemaDefinitionOptionToTS({type:o,required:!0});return h?{success:!0,result:`{[key: string]: ${d}${s.required?"":" | undefined"}}`}:{success:!1,result:d}}if(Array.isArray(s.enum)){let c=[],l=s.enum.map(e=>{if("string"==typeof e)return`'${e}'`;if("number"==typeof e)return`${e}`;let{success:t,result:s}=this.schemaToTS(e);return!1===t&&c.push(s),s}).join(" | ");return c.length?{success:!1,result:c.toString()}:(s.required||(l=`(${l}) | undefined`),{success:!0,result:l})}return -1!==["string","number","boolean","date","true","false","null"].indexOf(s.type)?this.simpleTypeToTS(s.type,!!s.required):this.schemaToTS(s.type)}),_defineProperty(this,"bodyParamToString",e=>{let t="";if(e.body){if(!this.schemas[e.body])return{result:`${e.body} is not defined by addSchema`,success:!1};t=`body:${e.body}`}return e.queryString&&(t+=`${t?",":""}queryParam:{[key:string]:string} | string`),{success:!0,result:t}}),_defineProperty(this,"getReturnTypeString",e=>({success:!0,result:`:Promise<${e.returnType}>`})),_defineProperty(this,"getUrlString",(e,t,s)=>s?`const url = \`\${this.base_url}${e}${t}\${this.getUrlQueryParam(queryParam)}\``:`const url = \`\${this.base_url}${e}${t}\``),_defineProperty(this,"getMethodsString",e=>{let t="";for(let s in e){let{apis:r}=e[s];for(let i of r){let{method:n,configStr:a="",description:o,queryString:u}=i,h="/"!==i.path[0]?"/"+i.path:i.path,d=s+h.replace(/\//g,"_"),c=this.bodyParamToString(i);if(!c.success)return{success:!1,result:c.result};let l=this.getReturnTypeString(i);if(!l.success)return{success:!1,result:l.result};t+=`
    ${d} = async (${c.result})${l.result}=>{
        ${this.getUrlString(s,h,u)}
        return await this.request({
            name:'${d}',
            url,description:"${o}",method:"${n}",${i.body?"body,":""}

            ${a}
        })
    }
                `}}return{success:!0,result:t}}),_defineProperty(this,"getInterfaces",()=>{let e="";for(let t in this.schemas){let s=this.schemas[t];if("string"==typeof s)continue;let{success:r,result:i}=this.schemaToTS(s);if(!r)return{success:!1,result:i};e+=`
export type ${t} = ${i};
            `}return{success:!0,result:e}}),_defineProperty(this,"getApiTypes",e=>{let t="";for(let s in t+=`
express app api types:


        `,t+=`
type I_response<T> = { status: number, success: boolean, message?: string, value: T }
            `,e){let{apis:r,path:i}=e[s];for(let n of r){let{path:a,returnType:o}=n;"/"===a[0]&&(a=a.slice(1,a.length)),t+=`
export type API_${s}_${a} = I_response<(${o})>;
            `}}return t}),_defineProperty(this,"generateUIDoc",(e,t)=>{let s=this.getMethodsString(e);if(!s.success)return{success:!1,result:s.result};let r=this.getInterfaces();if(!r.success)return{success:!1,result:r.result};let i=`
import AIOApis from "aio-apis";
type I_APIS = {base_url:string,token:string,logout:()=>void}
${r.result}
export default class APIS extends AIOApis {
    base_url:string;
    constructor(p:I_APIS) {
        super({
            token: p.token,
            id: '${t}',
            lang: 'fa',
            onCatch: (response) => {
                if(response.status === 401 || response.data?.status === 401){p.logout()}
                return response.response.data.message
            },
            getResult: (response) => response.data.value,
            errorResult:false
        });
        this.base_url = p.base_url;
    }
${s.result}
}
        `;return{success:!0,result:i}})}}exports.AIOSchema=AIOSchema;