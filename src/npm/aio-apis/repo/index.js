var __awaiter=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))(function(s,a){function o(e){try{h(r.next(e))}catch(t){a(t)}}function n(e){try{h(r.throw(e))}catch(t){a(t)}}function h(e){var t;e.done?s(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(o,n)}h((r=r.apply(e,t||[])).next())})};import e from"axios";import t from"axios-mock-adapter";import{Alert as i,Loading as r}from"aio-popup";import{Stall as s,Storage as a}from"aio-utils";import{useRef as o}from"react";export default class n{constructor(t){this.currentError="",this.apisThatAreInLoadingTime={},this.setToken=t=>{t&&t===this.token&&(e.defaults.headers.common.Authorization=`Bearer ${t}`)},this.addAlert=e=>{let{type:t,title:r,text:s,time:a}=e;i({type:t,title:r,text:s,time:a,className:"aio-apis-popup",closeText:"fa"===this.props.lang?"بستن":"Close"})},this.getUrlQueryParam=e=>{if("string"==typeof e)return`/${e}`;if("object"==typeof e&&null!==e){let t=Object.keys(e).map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&");return`?${t}`}return""},this.responseToResult=t=>__awaiter(this,void 0,void 0,function*(){let{headers:i=this.props.headers,onSuccess:r}=t,{onCatch:s}=this.props;if(!s){let a=`
    missing onCatch in api: ${t.description},
    you should set onCatch in api or in props of AIOApis    
`;return{result:!1,errorMessage:a,success:!1,response:{}}}try{let o=yield e({method:t.method,url:t.url,data:t.body,headers:i});try{return{result:r(o),success:!0,response:o,errorMessage:""}}catch(n){return{result:n.message,success:!1,response:o,errorMessage:""}}}catch(h){try{return{result:!1,errorMessage:s(h,t),success:!1,response:h}}catch(c){return{result:!1,errorMessage:c.message,success:!1,response:h}}}}),this.loading=(e,t)=>{let{loading:i=!0,loader:s=this.props.loader,name:a,loadingParent:o}=e;if(i){let n=new r(s);n[t?"show":"hide"](a,o)}},this.handleMock=e=>{if(e.mock&&this[e.mock.methodName]){let t=e.mock.methodName;handleMockApi({url:e.url,delay:e.mock.delay,method:e.method,result:e=>this[t](e)})}},this.callCache=e=>__awaiter(this,void 0,void 0,function*(){if(this.apisThatAreInLoadingTime[e.name])return!1;this.setToken(e.token||this.props.token),this.handleMock(e),this.apisThatAreInLoadingTime[e.name]=!0;let{success:t,response:i}=yield this.responseToResult(e);if(this.apisThatAreInLoadingTime[e.name]=!1,t)return i}),this.requestFn=(e,t)=>__awaiter(this,void 0,void 0,function*(){if(this.apisThatAreInLoadingTime[e.name])return!1;if(this.setToken(e.token||this.props.token),this.handleMock(e),e.cache){let i=this.cache.getCachedValue(e.name,e.cache.name);if(void 0!==i)return e.onSuccess(i)}else this.cache.removeCache(e.name);this.loading(e,!0),this.apisThatAreInLoadingTime[e.name]=!0;let{result:r,errorMessage:s,success:a,response:o}=yield this.responseToResult(e);if(this.loading(e,!1),this.apisThatAreInLoadingTime[e.name]=!1,a)e.cache&&this.cache.setCache(e.name,e.cache.name,{api:e,value:o});else{let n=s;if(e.onError&&(n=e.onError(o,n)),"string"==typeof n&&(this.currentError=n,!t)){let h="fa"===this.props.lang?`${e.description} با خطا روبرو شد`:`An error was occured in ${e.description}`;this.addAlert({type:"error",title:h,text:n})}}return r}),this.retries=(e,t)=>__awaiter(this,void 0,void 0,function*(){let i=[0,...t];return yield new Promise(t=>__awaiter(this,void 0,void 0,function*(){for(let r=0;r<i.length;r++)if(yield s(i[r]),r<i.length-1){let a=yield this.requestFn(e,!0);if(!1!==a)return t(a);console.log(`aio-apis => retries[${r}] failed`),console.log(`api error is : ${this.currentError}`)}else{let o=yield this.requestFn(e);t(o)}}))}),this.request=e=>__awaiter(this,void 0,void 0,function*(){return e.retries?yield this.retries(e,e.retries):yield this.requestFn(e)}),console.log("aio-apis constructor"),this.props=t;let o=new a(t.id);this.token=t.token,this.setToken(t.token),this.cache=new Cache(o,e=>__awaiter(this,void 0,void 0,function*(){return yield this.callCache(e.api)})),this.getCachedValue=this.cache.getCachedValue,this.fetchCachedValue=this.cache.fetchCachedValue,this.removeCache=this.cache.removeCache}};function handleMockApi(i){let r=new t(e);"get"===i.method&&(r.resetHandlers(),r.onGet(i.url).replyOnce(e=>new Promise(t=>{setTimeout(()=>{let{status:s,data:a}=i.result(e);t([s,a]),r.restore()},i.delay)}))),"post"===i.method&&(r.resetHandlers(),r.onPost(i.url).replyOnce(e=>new Promise(t=>{setTimeout(()=>{let{status:s,data:a}=i.result(e);t([s,a]),r.restore()},i.delay)})))}class Cache{constructor(e,t){this.updateCacheByKey=e=>__awaiter(this,void 0,void 0,function*(){if(this.storage.isExpired(e)){this.storage.remove(e);return}let t=this.storage.load(e);if(!t)return;let{api:i}=t;if(!i.cache)return;let r=yield this.callApi(t),s={api:t.api,value:r};this.setCache(i.name,i.cache.name,s)}),this.getCachedValue=(e,t)=>{let i=`${e}-${t}`,r=this.storage.load(i);if(void 0!==r)return r.value},this.fetchCachedValue=(e,t)=>this.updateCacheByKey(`${e}-${t}`),this.setCache=(e,t,i)=>{var r;let s=`${e}-${t}`,a=null===(r=i.api.cache)||void 0===r?void 0:r.expiredIn;this.storage.save(s,i,a)},this.removeCache=(e,t)=>{if(t)this.storage.remove(`${e}-${t}`);else{let i=this.storage.getKeys();for(let r of i)0===r.indexOf(`${e}-`)&&this.storage.remove(r)}},this.storage=e,this.callApi=t}}export const useInstance=e=>{let t=o(null);return null===t.current&&(t.current=e),t.current};